// room script file
#define MAX_STUFF 32
#define OFFSET 128.0
World world;
float step;
struct Thing {
  Body* b;
  Overlay* ovr;
  DynamicSprite* dnspr;
  
  import void InitFromBody(Body* b);
  import void Render();
};
Thing things[MAX_STUFF];
int thing_count;

void Thing::InitFromBody(Body* b) {
  this.b = b;
  
  DrawingSurface* surf;
  int w = FloatToInt(b.width_x);
  int h = FloatToInt(b.width_y);
  this.dnspr = DynamicSprite.Create(w, h);
  surf = this.dnspr.GetDrawingSurface();
  surf.Clear(256 + Random(65504));
  if(w > 2 && h > 2) {
    surf.DrawingColor = 256 + Random(65504);
    surf.DrawRectangle(1, 1, w-2, h-2);
  }
  surf.Release();
  
  this.ovr = Overlay.CreateGraphical(FloatToInt(b.position_x+OFFSET), FloatToInt(b.position_y+OFFSET), this.dnspr.Graphic);
  this.ovr.X = FloatToInt(this.b.position_x - this.b.width_x/2.0 + OFFSET);
  this.ovr.Y = FloatToInt(this.b.position_y - this.b.width_y/2.0 + OFFSET);
}

void Thing::Render() {
  int w = FloatToInt(this.b.width_x);
  int h = FloatToInt(this.b.width_y);
  this.ovr.Graphic = this.dnspr.Graphic;
  this.ovr.X = FloatToInt(this.b.position_x - this.b.width_x/2.0 + OFFSET);
  this.ovr.Y = FloatToInt(this.b.position_y - this.b.width_y/2.0 + OFFSET);
  this.ovr.Width = w;
  this.ovr.Height = h;
  this.ovr.Rotation = Maths.RadiansToDegrees(this.b.rotation);
}

void NewBody(float x, float y, float width, float height, float mass) {
  Body* b = Body.Create();
  b.Set(Vec2.New(width, height), mass);
  b.position_x = x;
  b.position_y = y;
  
  things[thing_count].InitFromBody(b);
  thing_count++;
	world.AddBody(b);
}

void RenderAll() {
  for(int i=0; i<thing_count; i++) {
    things[i].Render();
  }
}

function room_Load()
{
  world.Init(0.0, 9.8);
  step = 1.0/IntToFloat(GetGameSpeed());
  
  NewBody(0.0, 26.0, 160.0, 32.0, FLT_MAX);
  NewBody(10.0, 4.0, 8.0, 8.0, 200.0);
  NewBody(100.0, 2.0, 8.0, 8.0, 200.0);
  NewBody(96.0, 12.0, 8.0, 8.0, 200.0);
  NewBody(70.0, 2.0, 16.0, 16.0, 400.0);
  NewBody(30.0, 5.0, 8.0, 8.0, 200.0);  
}

bool start;
function room_RepExec()
{
  if(!start) {
    Display("START");
    start = !start;
  }
  
  world.Step(step);

  RenderAll();  
}
